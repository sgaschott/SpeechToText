@{
	ViewBag.Title = "Home Page";
}

<!DOCTYPE html>
<html>
<body style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px;">
	<div id="warning">
		<h1 style="font-weight:500;">Speech Recognition SDK not found :(</h1>
	</div>
	<div id="content" style="display:none">
		<table width="100%">
				<td></td>
				<td>
					<h1 style="font-weight:500;">Speech Recognition Demo</h1>
				</td>
			</tr>
			<tr>
				@*Subscription key*@
				<td><input id="key" type="hidden" @*"text*@ size="40" value="3a09bd269b1e4d42bfc93aa77a21061e"></td>
			</tr>
			<tr>
				@*Language*@
				<td align="right"></td>
				<td align="left">
					<select id="languageOptions" @*style="visibility: hidden"*@>
						<option value="ar-EG">Arabic - EG</option>
						<option value="ca-ES">Catalan - ES</option>
						<option value="da-DK">Danish - DK</option>
						<option value="da-DK">Danish - DK</option>
						<option value="de-DE">German - DE</option>
						<option value="en-AU">English - AU</option>
						<option value="en-CA">English - CA</option>
						<option value="en-GB">English - GB</option>
						<option value="en-IN">English - IN</option>
						<option value="en-NZ">English - NZ</option>
						<option value="zh-CN">Chinese - CN</option>
						<option value="en-US" selected="selected">English - US</option>
						<option value="es-ES">Spanish - ES</option>
						<option value="es-MX">Spanish - MX</option>
						<option value="fi-FI">Finnish - FI</option>
						<option value="fr-CA">French - CA</option>
						<option value="fr-FR">French - FR</option>
						<option value="hi-IN">Hindi - IN</option>
						<option value="it-IT">Italian - IT</option>
						<option value="ja-JP">Japanese - JP</option>
						<option value="ko-KR">Korean - KR</option>
						<option value="nb-NO">Norwegian - NO</option>
						<option value="nl-NL">Dutch - NL</option>
						<option value="pl-PL">Polish - PL</option>
						<option value="pt-BR">Portuguese - BR</option>
						<option value="pt-PT">Portuguese - PT</option>
						<option value="ru-RU">Russian - RU</option>
						<option value="sv-SE">Swedish - SE</option>
						<option value="zh-CN">Chinese - CN</option>
						<option value="zh-HK">Chinese - HK</option>
						<option value="zh-TW">Chinese - TW</option>
					</select>
				</td>
			<tr>
				@*Recognition Mode*@
					<option value="Dictation" id="recognitionMode" style="visibility: hidden">Dictation</option>
				</td>
				@*Simple Result*@
					<option value="Simple" id="formatOptions" selected="selected" style="visibility: hidden">Simple Result</option>
				</td>
			</tr>
			<tr>
				@*Input Source*@
					<option value="Mic" id="inputSource" selected="selected" style="visibility: hidden">Microphone</option>
				</td>
			</tr>
			<tr>
				<td></td>
				<td>
					</br>
					@*Start and Stop Buttons*@
					<button id="startBtn" @*disabled="disabled"*@ class="btn btn-md btn-success" >Start</button>
					<button id="stopBtn" @*disabled="disabled"*@ class="btn btn-md btn-danger" style="display: none" >Stop</button>
					<input type="file" id="filePicker" accept=".wav" style="display:none" />
				</td>
			</tr>
			<tr>
				<td></td>
				<td>
					<table>
						</br>
						<tr>
							<td>
								@*Text Area for predicted text*@
								<textarea id="phraseDiv" style="display: inline-block;width:500px;height:200px" onclick="ClickInTextbox(event)"></textarea>
							</td>
							<td style="vertical-align: top">
								<span id="hypothesisDiv" style="display:none"></span>
							</td>
						</tr>
					</table>
				</td>
			</tr>
			<tr>
				<td align="right">Status:</td>
				<td align="left"><span id="statusDiv"></span></td>
			</tr>
		</table>
	</div>

	<!-- SDK REFERENCE -->
	<script src="../../distrib/speech.sdk.bundle.js"></script>

	<!-- SDK USAGE -->
	<script>
		// On document load resolve the SDK dependency
		function Initialize(onComplete) {
			if (!!window.SDK) {
				document.getElementById('content').style.display = 'block';
				document.getElementById('warning').style.display = 'none';
				onComplete(window.SDK);
			}
		}

		// Setup the recognizer
		function RecognizerSetup(SDK, recognitionMode, language, format, subscriptionKey) {

			recognitionMode = SDK.RecognitionMode.Dictation;

			var recognizerConfig = new SDK.RecognizerConfig(
				new SDK.SpeechConfig(
					new SDK.Context(
						new SDK.OS(navigator.userAgent, "Browser", null),
						new SDK.Device("SpeechSample", "SpeechSample", "1.0.00000"))),
				recognitionMode,
				language, // Supported languages are specific to each recognition mode. Refer to docs.
				format); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)


			var useTokenAuth = false;

			var authentication = function () {
				if (!useTokenAuth)
					return new SDK.CognitiveSubscriptionKeyAuthentication(subscriptionKey);

				var callback = function () {
					var tokenDeferral = new SDK.Deferred();
					try {
						var xhr = new (XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');
						xhr.open('GET', '/token', 1);
						xhr.onload = function () {
							if (xhr.status === 200) {
								tokenDeferral.Resolve(xhr.responseText);
							} else {
								tokenDeferral.Reject('Issue token request failed.');
							}
						};
						xhr.send();
					} catch (e) {
						window.console && console.log(e);
						tokenDeferral.Reject(e.message);
					}
					return tokenDeferral.Promise();
				}

				return new SDK.CognitiveTokenAuthentication(callback, callback);
			}();

			var files = document.getElementById('filePicker').files;
			if (!files.length) {
				return SDK.CreateRecognizer(recognizerConfig, authentication);
			} else {
				return SDK.CreateRecognizerWithFileAudioSource(recognizerConfig, authentication, files[0]);
			}
		}

		// Start the recognition
		function RecognizerStart(SDK, recognizer) {
			recognizer.Recognize((event) => {
				/*
				 Alternative syntax for typescript devs.
				 if (event instanceof SDK.RecognitionTriggeredEvent)
				*/
				switch (event.Name) {
					case "RecognitionTriggeredEvent":
						UpdateStatus("Initializing");
						break;
					case "ListeningStartedEvent":
						UpdateStatus("Listening");
						break;
					case "RecognitionStartedEvent":
						UpdateStatus("Listening_Recognizing");
						break;
					case "SpeechStartDetectedEvent":
						UpdateStatus("Listening_DetectedSpeech_Recognizing");
						console.log(JSON.stringify(event.Result)); // check console for other information in result
						break;
					case "SpeechHypothesisEvent":
						UpdateRecognizedHypothesis(event.Result.Text, false);
						console.log(JSON.stringify(event.Result)); // check console for other information in result
						break;
					case "SpeechFragmentEvent":
						UpdateRecognizedHypothesis(event.Result.Text, true);
						console.log(JSON.stringify(event.Result)); // check console for other information in result
						break;
					case "SpeechEndDetectedEvent":
						OnSpeechEndDetected();
						UpdateStatus("Processing_Adding_Final_Touches");
						console.log(JSON.stringify(event.Result)); // check console for other information in result
						break;
					case "SpeechSimplePhraseEvent":
						UpdateRecognizedPhrase(JSON.stringify(event.Result, null, 3));
						break;
					case "RecognitionEndedEvent":
						OnComplete();
						UpdateStatus("Idle");
						console.log(JSON.stringify(event)); // Debug information
						break;
					default:
						console.log(JSON.stringify(event)); // Debug information
				}
			})
				.On(() => {
					// The request succeeded. Nothing to do here.
				},
					(error) => {
						console.error(error);
					});
		}

		// Stop the Recognition.
		function RecognizerStop(SDK, recognizer) {
			// recognizer.AudioSource.Detach(audioNodeId) can be also used here. (audioNodeId is part of ListeningStartedEvent)
			recognizer.AudioSource.TurnOff();
		}
	</script>

	<!-- Browser Hooks -->
	<script>
		var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv;
		var key, languageOptions, formatOptions, recognitionMode, inputSource, filePicker;
		var SDK;
		var recognizer;
		var previousSubscriptionKey;

		document.addEventListener("DOMContentLoaded", function () {
			createBtn = document.getElementById("createBtn");
			startBtn = document.getElementById("startBtn");
			stopBtn = document.getElementById("stopBtn");
			phraseDiv = document.getElementById("phraseDiv");
			hypothesisDiv = document.getElementById("hypothesisDiv");
			statusDiv = document.getElementById("statusDiv");
			key = document.getElementById("key");
			languageOptions = document.getElementById("languageOptions");
			formatOptions = document.getElementById("formatOptions");
			inputSource = document.getElementById("inputSource");
			recognitionMode = document.getElementById("recognitionMode");
			filePicker = document.getElementById('filePicker');

			languageOptions.addEventListener("change", Setup);
			formatOptions.addEventListener("change", Setup);
			recognitionMode.addEventListener("change", Setup);

			startBtn.addEventListener("click", function () {
				if (inputSource.value === "File") {
					filePicker.click();
				} else {
					if (!recognizer || previousSubscriptionKey != key.value) {
						previousSubscriptionKey = key.value;
						Setup();
					}
					hypothesisDiv.innerHTML = "";
					RecognizerStart(SDK, recognizer);
					//Hides Start button and shows stop button when clicked for toggle start/stop 2018-06-15 SG
					document.getElementById("startBtn").style.display = "none";
					document.getElementById("stopBtn").style.display = "unset";
				}
			});


			stopBtn.addEventListener("click", function () {
				RecognizerStop(SDK, recognizer);
				//Hides stop button and shows start button when clicked for toggle start/stop 2018-06-15 SG
				document.getElementById("startBtn").style.display = "unset";
				document.getElementById("stopBtn").style.display = "none";
			});

			Initialize(function (speechSdk) {
				SDK = speechSdk;
				document.getElementById("startBtn").style.display = "unset";
				document.getElementById("stopBtn").style.display = "none";
			});
		});

		function Setup() {
			if (recognizer != null) {
				RecognizerStop(SDK, recognizer);
			}
			recognizer = RecognizerSetup(SDK, recognitionMode.value, languageOptions.value, SDK.SpeechResultFormat[formatOptions.value], key.value);
		}

		function UpdateStatus(status) {
			statusDiv.innerHTML = status;
		}

		function UpdateRecognizedHypothesis(text, append) {
			if (append)
				hypothesisDiv.innerHTML += text + " ";
			else
				hypothesisDiv.innerHTML = text;

			var length = hypothesisDiv.innerHTML.length;
			if (length > 403) {
				hypothesisDiv.innerHTML = "..." + hypothesisDiv.innerHTML.substr(length - 400, length);
			}
		}

		function OnSpeechEndDetected() {
			//Hide stop button and show start button instead of disabling button 2018-06-18 sg
			document.getElementById("startBtn").style.display = "unset";
			document.getElementById("stopBtn").style.display = "none";
		}

		//Updates text predictions to textbox, retains edited text.
		function UpdateRecognizedPhrase(json) {
			//debugger;
			hypothesisDiv.innerHTML = "";
			var result = JSON.parse(json);
			if (result.DisplayText === undefined) {
				result.DisplayText = "";
			}
			var currentText = $("#phraseDiv").val();
			if (result.DisplayText === "" || currentText === "") {
				$("#phraseDiv").val(currentText + result.DisplayText);
			} else {
				$("#phraseDiv").val(currentText + " " + result.DisplayText);
			}
		}

		function OnComplete() {
			//Hide stop button and show start button instead of disabling button 2018-06-18 sg
			document.getElementById("startBtn").style.display = "unset";
			document.getElementById("stopBtn").style.display = "none";
		}

		//Recording stops when user clicks in text box 2018-6-14 SG
		function ClickInTextbox(event) {
			RecognizerStop(SDK, recognizer);
			document.getElementById("startBtn").style.display = "unset";
			document.getElementById("stopBtn").style.display = "none";
		}

	</script>
</body>
</html>
